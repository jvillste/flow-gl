* Layout

(defprotocol Layout
  (layout [layout state requested-width requested-height])

  (children [layout]))

(defprotocol Layoutable
  (preferred-size [this available-width available-height]))

** Layout gets the applicaiton state as a parameter and returns a new state along the layout so that it can instantiate child compnents based on the available width and height. Most layouts are not "size dependent" and thus do not need to modify the application state.

* Rendering

** Renderers

(defprotocol Renderer
  (can-draw? [this drawable])

  (draw-drawables [this drawables gl])

  (start-frame [this gl])

  (end-frame [this gl])

  (delete [this gl]))

** Drawables

(defprotocol Java2DDrawable
  (draw [this graphics]))

(defprotocol NanoVGDrawable
  (draw-nanovg [this nanovg]))

(defprotocol TriangleListDrawable
  (triangles [this]))

** Transformers

(defprotocol Transformer
  (transform [this gpu-state drawables x y width height]))

*** Example

A Filter -transformer renders drawables on a frame buffer object and returns a textured quad that is rendered with a fragment shader for example to apply a blur on all of the drawables.

https://www.youtube.com/watch?v=109yVjGUFUs&list=PLhYdcB_7fSYg_JZtMHBLLzMoqbStNgMjK&index=2

* Sourcemaps from render tree to the code that produced it
** Layouts and drawables are called through a macro that attaches line and column numbers to the render tree. The resulting image can be clicked to see what code produced the clicked element.
* State
** All state in one map
** Components use lenses/cursors to read and modify their own state
** I think reagent's reactive atoms are simpler
*** Layout's would not need to be able to modify the application state during the layout because each component's local state would be in separate atoms.
** Requirements
*** Initialize state
**** Start core.async go loops
**** Reserve resources from GPU
**** Create atoms
*** Destruct state
**** Release resources from GPU
**** Close core.async channels
*** Invalidate cache when state changes
**** Make cached function calls depend on referenced atoms
**** Support cached function calls during cached function calls
** Solutions
*** Reagent atom
**** Implement the same interfaces as Clojures atom and notify dereferences
**** Components have constructors that are called when the component is used first time
**** Destructors are not supported
***** Maybe with Reacts life cycle callbacks?
**** Reagent components complect state management to scene graph generation
*** Reflex atom
**** Extend Clojures atom to notify dereferences
*** Use cached function calls as constructors
**** Destructors could be given with the constructor
***** (cache/call destructor constructor agument1 argument2)
**** How to track state change in atoms returned by constructor?
*** Atom registry
**** constructor must return an atom
**** The atoms value is checked for change when cache is hit
**** A destructor can be provied when the state is retrieved from the registry
***** (atom-registry/get-atom :id-1 constructor destructor)
*** Value registry
**** gives a value for an id or initializes it with a given constructor
**** Keeps track of referenced values
* Concurrency
** core.async
* Datomic and datascript
** Pull part's of the datomic db to the client as a datascipt db.
** Render the ui based on the local db.
** Create a transaction and apply to the local db
** When the user want's to commit, send the transaction to the server.
*** Optimistic locking can be implemented by sending the last seen transaction number among the transaction statements.
*** To implement security and other constraints there should be "commands" that are shared betwheen the client and server as portable clojure code and applied on each side to the local db.
* Abstractions
** Rendering
*** Renderer
**** QuadViewRenderer
***** Draws textured quads for something that can render to texture using Java2D
****** Textures are cached in an atlas that is garbage collected
***** Should draw something that returns an image. This way creating images could be done asynchronously for example when an SVG image is resized.
**** QuadRenderer
***** Draws quads that already have textures on the GPU
***** Quads have attached fragment shader sources that get compiled if they are not already compiled
****** Only the first shader in the renderable batch is used for the whole batch.
******* The reanderables should be grouped by the sahader and rendered as those groups.
***** Unused fragment shaders get deleted after the frame
*** Transformer
**** Tiled rendering
***** Render to textures
***** Render only renderables that have changed compared to the last frame
***** Render only tiles that are on the given area
**** Windowed rendering
***** Render only the drawables that
** Mouse event handlers attached to renderables
** Mouse event routing through the scene graph (layouts and renderables)
** Keyboard events from a single callback
** Layout
*** Sets coodinates to renderables
** Components
*** Cached render functions that return layoutables
**** Is time in lexical or dynamic scope?
**** State is held in the closure or global atoms
**** Cache invalidation by state change
**** Keyboard focus as a parameter to the render function?
*** Keyboard event routing through component hierarchy
*** Keyboard focus

